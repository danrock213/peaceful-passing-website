"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/vendors/page",{

/***/ "(app-pages-browser)/./lib/geocode.ts":
/*!************************!*\
  !*** ./lib/geocode.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geocodeCity: () => (/* binding */ geocodeCity)\n/* harmony export */ });\n// @/lib/geocode.ts\nasync function geocodeCity(city) {\n    try {\n        const url = \"https://nominatim.openstreetmap.org/search?q=\".concat(encodeURIComponent(city), \"&format=json&limit=1\");\n        const res = await fetch(url, {\n            headers: {\n                'User-Agent': 'PeacefulPassageApp/1.0 (admin@peacefulpassage.app)'\n            }\n        });\n        if (!res.ok) {\n            console.error(\"Geocoding failed with status \".concat(res.status));\n            return null;\n        }\n        const data = await res.json();\n        if (!Array.isArray(data) || data.length === 0) {\n            console.warn(\"No results found for city: \".concat(city));\n            return null;\n        }\n        const { lat, lon } = data[0];\n        return {\n            lat: parseFloat(lat),\n            lng: parseFloat(lon)\n        };\n    } catch (err) {\n        console.error(\"Error during geocoding:\", err);\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9nZW9jb2RlLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxtQkFBbUI7QUFFWixlQUFlQSxZQUFZQyxJQUFZO0lBQzVDLElBQUk7UUFDRixNQUFNQyxNQUFNLGdEQUF5RSxPQUF6QkMsbUJBQW1CRixPQUFNO1FBRXJGLE1BQU1HLE1BQU0sTUFBTUMsTUFBTUgsS0FBSztZQUMzQkksU0FBUztnQkFDUCxjQUFjO1lBQ2hCO1FBQ0Y7UUFFQSxJQUFJLENBQUNGLElBQUlHLEVBQUUsRUFBRTtZQUNYQyxRQUFRQyxLQUFLLENBQUMsZ0NBQTJDLE9BQVhMLElBQUlNLE1BQU07WUFDeEQsT0FBTztRQUNUO1FBRUEsTUFBTUMsT0FBTyxNQUFNUCxJQUFJUSxJQUFJO1FBQzNCLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDSCxTQUFTQSxLQUFLSSxNQUFNLEtBQUssR0FBRztZQUM3Q1AsUUFBUVEsSUFBSSxDQUFDLDhCQUFtQyxPQUFMZjtZQUMzQyxPQUFPO1FBQ1Q7UUFFQSxNQUFNLEVBQUVnQixHQUFHLEVBQUVDLEdBQUcsRUFBRSxHQUFHUCxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPO1lBQUVNLEtBQUtFLFdBQVdGO1lBQU1HLEtBQUtELFdBQVdEO1FBQUs7SUFDdEQsRUFBRSxPQUFPRyxLQUFLO1FBQ1piLFFBQVFDLEtBQUssQ0FBRSwyQkFBMEJZO1FBQ3pDLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRhbmllXFxjaGFyb25zcGFzc1xcYXBwc1xcd2ViXFxsaWJcXGdlb2NvZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQC9saWIvZ2VvY29kZS50c1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlb2NvZGVDaXR5KGNpdHk6IHN0cmluZyk6IFByb21pc2U8eyBsYXQ6IG51bWJlcjsgbG5nOiBudW1iZXIgfSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgdXJsID0gYGh0dHBzOi8vbm9taW5hdGltLm9wZW5zdHJlZXRtYXAub3JnL3NlYXJjaD9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGNpdHkpfSZmb3JtYXQ9anNvbiZsaW1pdD0xYDtcclxuXHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdVc2VyLUFnZW50JzogJ1BlYWNlZnVsUGFzc2FnZUFwcC8xLjAgKGFkbWluQHBlYWNlZnVscGFzc2FnZS5hcHApJywgLy8gUmVwbGFjZSB3aXRoIHlvdXIgY29udGFjdCBpbmZvXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXJlcy5vaykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBHZW9jb2RpbmcgZmFpbGVkIHdpdGggc3RhdHVzICR7cmVzLnN0YXR1c31gKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgfHwgZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgY29uc29sZS53YXJuKGBObyByZXN1bHRzIGZvdW5kIGZvciBjaXR5OiAke2NpdHl9YCk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgbGF0LCBsb24gfSA9IGRhdGFbMF07XHJcbiAgICByZXR1cm4geyBsYXQ6IHBhcnNlRmxvYXQobGF0KSwgbG5nOiBwYXJzZUZsb2F0KGxvbikgfTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGR1cmluZyBnZW9jb2Rpbmc6YCwgZXJyKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiZ2VvY29kZUNpdHkiLCJjaXR5IiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVzIiwiZmV0Y2giLCJoZWFkZXJzIiwib2siLCJjb25zb2xlIiwiZXJyb3IiLCJzdGF0dXMiLCJkYXRhIiwianNvbiIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIndhcm4iLCJsYXQiLCJsb24iLCJwYXJzZUZsb2F0IiwibG5nIiwiZXJyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/geocode.ts\n"));

/***/ })

});